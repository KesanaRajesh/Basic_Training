USE RAILWAY_RESERVATION_SYSTEM

--------------------CREATING TRAIN TABLE-------------------
CREATE TABLE TRAIN_DETAILS
(
TRAIN_NO INT PRIMARY KEY,
TRAIN_NAME VARCHAR(40),
SOURCE VARCHAR(40),
DESTINATION VARCHAR(40),
SEATS_AVALIABLE INT,
TRAIN_STATUS VARCHAR(40),
);
SELECT * FROM TRAIN_DETAILS


---------------------INSERTING TRAIN DETAILS USING STORED PROCEDURE----------------------
CREATE OR ALTER PROCEDURE SP_INSERT_TRAIN_DETAILS
@TRAIN_NO INT,
@TRAIN_NAME VARCHAR(40),
@SOURCE VARCHAR(40),
@DESTINATION VARCHAR(40),
@SEATS_AVALIABLE INT,
@TRAIN_STATUS VARCHAR(40)
AS
BEGIN
INSERT INTO TRAIN_DETAILS
VALUES
(@TRAIN_NO,@TRAIN_NAME,@SOURCE,@DESTINATION,@SEATS_AVALIABLE,@TRAIN_STATUS)
END


-----------------------UPDATING TRAIN DETAILS USING STORED PROCEDURE-------------------------
CREATE OR ALTER PROCEDURE SP_UPDATE_TRAIN_DETAILS
@TRAIN_NO INT,
@TRAIN_STATUS VARCHAR(40)
AS
BEGIN
UPDATE TRAIN_DETAILS
SET
TRAIN_STATUS = @TRAIN_STATUS
WHERE TRAIN_NO = @TRAIN_NO
END

-------------------------DELETE TRAIN DETAILS USING STORED PROCEDURE(SOFT DELETE)-----------------------

CREATE OR ALTER PROCEDURE SP_DELETE_TRAIN_DETAILS
@TRAIN_NO INT
AS
BEGIN
UPDATE TRAIN_DETAILS
        SET TRAIN_STATUS = 'InActive'
        WHERE TRAIN_NO = @TRAIN_NO
END
 
SELECT * FROM TRAIN_DETAILS;

----------------------CREATE TABLE FOR SHOWING TRAIN INFORMATION-----------------------
CREATE TABLE TRAIN_INFORMATION
(TRAIN_NO INT,
TRAIN_NAME VARCHAR(40),
SOURCE VARCHAR(40),
DESTINATION VARCHAR(40),
SEATS_AVALIABLE INT,
TRAIN_STATUS VARCHAR(40),
);
SELECT * FROM TRAIN_INFORMATION
-----------------DISPLAY ALL TRAINS INFORMATION-----------------------

CREATE OR ALTER PROCEDURE SP_DISPLAY_TRAIN_INFORMATION
AS
BEGIN
SELECT
TRAIN_NO ,
TRAIN_NAME,
SOURCE,
DESTINATION ,
SEATS_AVALIABLE ,
TRAIN_STATUS
FROM TRAIN_DETAILS
WHERE TRAIN_STATUS = 'Active'
END


-------------------CREATE TABLE TO STORE BOOKING DETAILS---------------------

CREATE TABLE TICKETS_BOOKING
(
TRAIN_NO INT,
TRAIN_NAME VARCHAR(40),
PASSENGER_NAME VARCHAR(40),
PASSENGER_AGE INT,
GENDER VARCHAR(10),
CLASS_TYPE VARCHAR(40),
PRICE_OF_TICKET INT,
NUMBER_OF_TICKETS INT,
STATUS varchar(40)
);

SELECT * FROM TICKETS_BOOKING

------------------------STORING USER BOOKING INFORMATION---------------------

CREATE OR ALTER PROCEDURE SP_USER_BOOKING_INFORMATION 
@TRAIN_NO INT,
@TRAIN_NAME VARCHAR(40),
@PASSENGER_NAME VARCHAR(40),
@PASSENGER_AGE INT,
@GENDER VARCHAR(10),
@CLASS_TYPE VARCHAR(40),
@PRICE_OF_TICKET INT,
@NUMBER_OF_TICKETS INT,
@STATUS VARCHAR(40)
AS
BEGIN
INSERT INTO TICKETS_BOOKING
VALUES 
(@TRAIN_NO,@TRAIN_NAME,@PASSENGER_NAME,@PASSENGER_AGE,@GENDER,@CLASS_TYPE,@PRICE_OF_TICKET,@NUMBER_OF_TICKETS, @status)
END;


---------------------- CANCELLING THE TICKET -----------------------------------

CREATE OR ALTER PROCEDURE SP_CANCEL_TICKET
@TRAIN_NO INT,
@TRAIN_NAME VARCHAR(40),
@PASSENGER_NAME VARCHAR(40),
@PASSENGER_AGE INT,
@GENDER VARCHAR(10),
@CLASS_TYPE VARCHAR(40),
@PRICE_OF_TICKET INT,
@NUMBER_OF_TICKETS INT,
@STATUS VARCHAR(40)
AS
BEGIN
UPDATE TICKETS_BOOKING 
SET STATUS = 'CANCELLED' 
WHERE
TRAIN_NO = @TRAIN_NO AND TRAIN_NAME = @TRAIN_NAME AND PASSENGER_NAME=@PASSENGER_NAME AND PASSENGER_AGE=@PASSENGER_AGE AND 
GENDER = @GENDER AND CLASS_TYPE = @CLASS_TYPE AND PRICE_OF_TICKET = @PRICE_OF_TICKET AND NUMBER_OF_TICKETS = @NUMBER_OF_TICKETS
END